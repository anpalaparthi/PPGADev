          1.2766e+01, -2.1156e+01],
        [-7.8789e+00,  2.7578e+01, -1.1514e+00,  ..., -7.8242e+00,
         -2.0672e+01,  3.2719e+01]], device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -4.7148,  18.2031,  -1.8076,  ...,  -7.3750, -10.2969,  23.3750],
        [ -5.0078,  31.0000,   1.3203,  ...,  -8.1250, -22.6406,  34.1562],
        [ -3.3789,  30.5625,   2.3848,  ...,  -7.7812, -21.9844,  34.5625],
        ...,
        [ -5.9219,  31.6875,   0.2720,  ...,  -8.4688, -22.1406,  35.0938],
        [  7.5859, -27.3125,   3.4590,  ...,   9.4844,  18.3125, -30.9219],
        [ -4.2852,  28.7188,   0.2180,  ..., -10.5078, -18.7969,  30.5156]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -8.5859,  26.1250,  -1.5449,  ...,  -6.5430, -21.2656,  33.1250],
        [ -5.1602,  30.5312,   0.7451,  ..., -10.3594, -22.3125,  34.6562],
        [ -2.8848,  28.9062,   2.3125,  ...,  -8.1484, -20.6406,  31.6250],
        ...,
        [ -5.1680,  30.9844,   0.6479,  ...,  -9.7266, -22.6875,  34.7500],
        [ 11.3672, -19.8594,   4.1406,  ...,   5.8047,  14.4453, -26.2188],
        [ -7.4453,  30.4219,  -1.0859,  ...,  -8.7969, -22.4219,  35.2188]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.5039,  27.9375,   0.2686,  ...,  -8.1562, -20.7500,  34.1875],
        [ -4.8477,  31.1875,   0.5991,  ...,  -8.9297, -23.0625,  35.4688],
        [ -4.8086,  29.0781,   2.3066,  ...,  -8.6172, -21.4531,  31.8594],
        ...,
        [ -4.0391,  31.5625,   0.7788,  ...,  -9.0156, -22.3125,  35.1875],
        [ 11.9531,  -3.3320,   5.8477,  ...,   0.1475,   5.9570, -10.0547],
        [ -5.8477,  29.6562,  -0.5000,  ...,  -9.5781, -20.8281,  33.7812]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.6250,  29.8125,   0.3618,  ...,  -8.4141, -21.5312,  33.4062],
        [ -4.9297,  31.5625,   0.7021,  ...,  -7.7695, -23.7031,  35.9375],
        [ -5.0938,  29.1094,   2.1914,  ...,  -8.0547, -21.9844,  32.1875],
        ...,
        [  1.9287,  23.0312,   2.3203,  ...,  -4.7148, -14.1953,  24.6719],
        [  7.2812, -15.1641,   3.8047,  ...,   3.6250,   8.1875, -22.2188],
        [ -3.3457,  27.9219,   0.3330,  ...,  -7.5469, -17.5469,  28.8438]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.7266,  31.6094,   0.5273,  ...,  -8.8125, -22.5938,  35.3125],
        [ -4.8711,  31.3125,   0.5586,  ..., -10.6797, -22.3438,  35.1562],
        [ -4.6445,  32.0312,   1.0674,  ...,  -7.7891, -23.2344,  35.5312],
        ...,
        [ -3.9805,  30.8125,   1.6152,  ...,  -8.7344, -22.2188,  33.9375],
        [  8.9219, -23.5781,   5.8164,  ...,   5.7656,  15.9531, -28.5469],
        [ -6.6562,  30.6719,  -0.8540,  ...,  -8.7969, -21.1250,  34.9375]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.8164,  30.9375,  -0.0759,  ...,  -9.6484, -22.7656,  35.4375],
        [ -4.4102,  31.6719,   0.9478,  ...,  -9.0156, -22.4375,  35.2188],
        [ -4.5391,  31.8281,   0.9697,  ...,  -8.9688, -22.9688,  35.5938],
        ...,
        [ -4.1094,  31.0312,   1.4619,  ...,  -7.6250, -22.2969,  33.9688],
        [  8.7422,  -3.5176,   4.5977,  ...,  -1.3379,   4.2148, -11.1172],
        [ -1.0967,  16.5625,   0.3616,  ...,  -5.1992, -10.9297,  19.8594]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.8945,  30.7656,  -0.0707,  ...,  -8.5312, -22.9062,  35.5312],
        [ -5.4336,  30.0938,   1.5967,  ...,  -6.8242, -23.6094,  35.3750],
        [ -2.7988,  30.4688,   1.8750,  ..., -10.0781, -21.3438,  33.3438],
        ...,
        [ -4.7188,  31.3906,   1.3779,  ...,  -8.0859, -23.0469,  35.2812],
        [ 12.1328,   7.0547,   0.6738,  ...,  -5.7695,   2.5449,   3.4629],
        [ -6.4180,   5.6719,   2.7129,  ...,   2.4219,  -7.6133,   7.6602]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.8789,  29.6250,  -1.2207,  ...,  -9.7969, -19.2656,  33.1250],
        [ -4.6250,  30.5000,   1.4834,  ...,  -9.3828, -21.6719,  32.9688],
        [ -4.1602,  30.2031,   2.2266,  ...,  -8.8828, -21.7500,  32.8125],
        ...,
        [ -4.5742,  31.7031,   1.0371,  ...,  -8.4297, -22.8125,  35.3750],
        [  1.1729,  13.8672,  -3.1016,  ...,  -7.8711,  -8.9375,  19.0000],
        [ -3.2500,  -5.5703,   4.5352,  ...,   8.8828,   3.3438,  -5.5977]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -7.1914,  28.5938,  -0.2333,  ...,  -7.7891, -22.0625,  34.2500],
        [ -3.1777,  30.7031,   1.9414,  ..., -10.3125, -21.2500,  32.5625],
        [ -4.3438,  30.3594,   1.0039,  ..., -10.3047, -20.5469,  32.9688],
        ...,
        [ -4.1719,  31.1719,   1.2939,  ...,  -8.3906, -22.3125,  35.0625],
        [ -4.6719,  29.8125,   0.5356,  ...,  -8.1172, -20.0781,  32.9062],
        [  9.1875,  10.9141,   3.7383,  ...,  -5.3359,   0.8589,   4.6055]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.7305,  29.8750,  -1.0420,  ...,  -9.2891, -22.3438,  35.1562],
        [ -1.2412,  29.2812,   2.6172,  ..., -10.5391, -19.3594,  30.3906],
        [ -3.3301,  29.8438,   2.4844,  ...,  -9.3125, -21.2500,  32.2500],
        ...,
        [ -0.8516,  27.4062,   1.5420,  ...,  -9.7734, -18.5469,  31.1875],
        [  4.2500,  22.5625,   1.5449,  ..., -12.0938, -12.6953,  21.5938],
        [ -2.5156,  26.5938,   0.5889,  ...,  -9.0391, -18.0000,  28.0469]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.2188,  30.3125,   0.4275,  ...,  -8.2578, -21.1562,  33.1875],
        [  1.9150,  23.4219,   1.9072,  ..., -10.5469, -14.1719,  22.5625],
        [ -2.7480,  30.8281,   1.5664,  ..., -10.5156, -21.2344,  32.5938],
        ...,
        [ -3.5430,  29.8125,   1.1455,  ...,  -9.5391, -21.5625,  33.6250],
        [  4.7539,  24.7812,   1.9053,  ..., -10.5469, -14.0547,  24.2031],
        [ -4.4492,  18.3125,   0.6104,  ...,  -2.5234, -19.2500,  24.5000]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -4.6875,  28.8281,   1.7451,  ...,  -7.6328, -21.2188,  31.7031],
        [  0.1223,  25.5781,   2.2793,  ..., -11.0000, -17.4844,  27.0625],
        [ -3.0996,  29.7656,   2.0449,  ...,  -8.5156, -21.9844,  33.5000],
        ...,
        [ -3.9629,  31.1406,   1.7383,  ...,  -8.8672, -22.4844,  34.8438],
        [  3.8945,  23.3125,   2.2227,  ..., -10.1719, -13.0547,  22.6406],
        [ -6.7617,  29.0469,  -0.0972,  ...,  -8.4453, -20.4844,  32.5625]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.1992,  24.1094,  -1.5176,  ...,  -7.6445, -18.0469,  30.4531],
        [ -5.5820,  29.9219,   0.9399,  ...,  -8.0000, -21.6406,  32.9062],
        [ -4.9336,  29.3125,   2.0566,  ...,  -8.7266, -21.4688,  32.5938],
        ...,
        [ -3.8125,  31.5625,   1.1543,  ..., -10.2422, -22.2500,  34.8438],
        [ -3.2461,  30.2031,   1.1230,  ...,  -9.1406, -21.0938,  32.3438],
        [ -6.9844,  29.9844,  -1.0215,  ...,  -9.1016, -22.5469,  35.2812]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.2852,  27.7969,  -0.6240,  ...,  -7.4336, -20.1719,  33.0938],
        [ -1.6592,  28.5156,   1.8066,  ..., -10.2734, -20.0625,  30.0469],
        [ -2.6445,  29.0156,   2.0664,  ...,  -8.8281, -21.1094,  32.6875],
        ...,
        [ -3.9629,  31.4844,   1.6543,  ...,  -8.1250, -22.7188,  35.3438],
        [ -3.5898,  29.8438,   2.2266,  ...,  -9.0703, -21.3438,  32.0938],
        [ -8.6641,  28.2031,  -1.2744,  ...,  -7.6445, -22.1250,  34.0000]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.6172,  31.2031,   0.9346,  ...,  -8.5938, -22.4219,  34.8125],
        [ -3.0234,  30.3125,   2.4766,  ...,  -7.0469, -21.7031,  33.0000],
        [ -2.6562,  31.3281,   2.2090,  ...,  -8.1562, -21.9531,  33.8125],
        ...,
        [ -4.6328,  31.1875,   1.5400,  ...,  -8.4688, -22.9688,  35.3438],
        [ -4.4727,  30.5000,   2.0332,  ...,  -7.8984, -22.2031,  33.1250],
        [ -9.1641,  26.2031,  -0.8530,  ...,  -6.1992, -21.4688,  32.6875]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.6992,  27.1250,   0.6992,  ...,  -8.8125, -18.6719,  29.1406],
        [ -3.0547,  30.7344,   1.9531,  ...,  -8.6562, -21.9219,  33.6250],
        [ -3.2656,  29.8281,   2.6328,  ...,  -9.4766, -20.9531,  32.2500],
        ...,
        [ -5.1250,  29.3281,   1.3945,  ...,  -7.3164, -22.6875,  34.3125],
        [ -4.8984,  31.6250,   1.0723,  ...,  -8.1094, -22.6562,  35.3750],
        [ -6.4805,  29.9531,  -0.3257,  ...,  -9.4141, -22.9062,  35.1562]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ 1.1514e+00,  1.2609e+01,  1.2199e-02,  ..., -4.4453e+00,
         -5.2070e+00,  1.2461e+01],
        [-5.5156e+00,  2.9922e+01,  1.7188e+00,  ..., -7.7305e+00,
         -2.3016e+01,  3.4062e+01],
        [-3.8340e+00,  2.9609e+01,  1.7305e+00,  ..., -9.5859e+00,
         -2.0750e+01,  3.1328e+01],
        ...,
        [-5.4805e+00,  3.0734e+01,  9.7461e-01,  ..., -8.1250e+00,
         -2.3594e+01,  3.5562e+01],
        [-4.6680e+00,  3.1359e+01,  8.6621e-01,  ..., -7.3555e+00,
         -2.2625e+01,  3.4344e+01],
        [-5.8750e+00,  3.0625e+01,  8.7451e-01,  ..., -6.8320e+00,
         -2.1516e+01,  3.2812e+01]], device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[-5.9180e+00,  2.7469e+01, -3.1128e-02,  ..., -8.6250e+00,
         -2.0312e+01,  3.3125e+01],
        [-3.7617e+00,  3.0422e+01,  2.5332e+00,  ..., -7.4648e+00,
         -2.1859e+01,  3.2969e+01],
        [-2.6133e+00,  2.9203e+01,  1.3877e+00,  ..., -9.7266e+00,
         -1.9516e+01,  3.0438e+01],
        ...,
        [-4.9883e+00,  3.1078e+01,  6.1914e-01,  ..., -1.0695e+01,
         -2.2203e+01,  3.4969e+01],
        [ 5.6055e+00,  9.7812e+00,  5.9766e+00,  ...,  1.8838e+00,
         -4.4570e+00,  6.8125e+00],
        [-4.5430e+00,  2.9188e+01,  7.8906e-01,  ..., -7.4531e+00,
         -2.0797e+01,  3.3844e+01]], device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.9688,  29.7812,  -0.3796,  ...,  -9.5781, -21.1562,  33.9375],
        [ -3.5977,  31.0312,   1.7920,  ...,  -8.1875, -22.3906,  34.0312],
        [ -0.6943,  28.2031,   2.2422,  ...,  -9.7109, -19.0469,  29.2656],
        ...,
        [ -4.1602,  31.2344,   1.5508,  ...,  -8.7969, -22.8438,  35.1875],
        [  4.9336,   9.1562,   5.4844,  ...,  -0.6685,  -2.7793,   7.9102],
        [ -1.9609,  26.4844,   1.5098,  ...,  -6.8711, -17.3281,  31.6406]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.6836,  31.4219,   0.3406,  ...,  -9.3047, -22.0469,  35.2500],
        [ -2.5293,  30.4062,   1.9453,  ...,  -8.0391, -21.2500,  32.9688],
        [ -1.8389,  26.6406,   2.9688,  ...,  -8.6094, -18.6719,  28.9688],
        ...,
        [ -4.9883,  31.4062,   0.9834,  ...,  -9.3438, -22.6875,  34.6875],
        [ -3.3867,  31.3281,   1.2158,  ..., -10.0078, -22.2812,  34.2188],
        [ -1.3330,  26.2812,   2.5156,  ...,  -5.9062, -18.7969,  31.1094]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -3.6797,  30.4375,   1.2090,  ...,  -9.6641, -19.8906,  33.0000],
        [ -0.7231,  27.8594,   2.1094,  ...,  -6.9102, -17.3750,  28.0000],
        [ -5.2070,  29.9062,   2.2207,  ...,  -7.8945, -22.2344,  32.5938],
        ...,
        [ -4.0547,  31.5156,   1.0908,  ..., -10.2266, -22.3438,  34.8750],
        [ -5.4766,  30.7812,   1.5215,  ...,  -8.3047, -22.6719,  33.6250],
        [ -5.5469,  26.6875,   0.9644,  ...,  -7.0898, -20.4375,  31.7500]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.3945,  30.3125,  -0.8208,  ...,  -9.1719, -21.9531,  35.1250],
        [ -1.1982,  25.9688,   2.3926,  ...,  -8.5938, -17.8594,  26.9062],
        [ -4.1758,  31.2344,   1.0322,  ...,  -7.8086, -21.9375,  34.1562],
        ...,
        [ -3.5918,  31.8750,   1.0547,  ..., -10.5781, -22.2500,  35.1562],
        [ -5.0234,  30.7969,   2.1016,  ...,  -6.7539, -22.9062,  33.9688],
        [ -6.8242,  28.5625,   1.6777,  ...,  -7.0703, -22.8906,  32.5625]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.5703,  30.0781,  -1.2197,  ...,  -9.5000, -22.2344,  35.1875],
        [ -6.9414,  26.3438,   1.7363,  ...,  -6.7617, -20.6250,  31.9844],
        [ -3.3203,  30.6406,   1.6416,  ...,  -7.3047, -21.8750,  34.0000],
        ...,
        [ -3.7852,  31.5938,   1.1406,  ..., -10.3984, -22.2656,  34.9062],
        [ -4.8281,  30.7188,   1.7500,  ...,  -8.1797, -22.6250,  33.8750],
        [ -5.6797,  30.3906,   1.0166,  ...,  -8.9766, -22.3281,  33.5625]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -7.1133,  28.6250,  -0.1088,  ...,  -8.5234, -21.4219,  33.0312],
        [ -4.2695,  30.0781,   2.4512,  ...,  -8.4375, -21.7812,  32.5312],
        [ -2.2871,  29.1250,   2.3809,  ...,  -7.0508, -20.6094,  32.7812],
        ...,
        [ -4.4492,  31.4531,   1.3447,  ...,  -9.3906, -22.6406,  35.2500],
        [ -2.5762,  26.2969,   2.7598,  ...,  -4.6367, -18.8438,  29.7031],
        [ -5.5469,  31.1562,   0.8110,  ...,  -8.4688, -21.9688,  34.0625]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -7.4961,  27.1719,   0.9624,  ...,  -8.4297, -20.0000,  30.1719],
        [ -3.2988,  31.5000,   1.9551,  ...,  -8.2812, -22.3438,  34.6875],
        [ -3.6074,  30.9062,   1.4600,  ...,  -7.5703, -22.1719,  34.5312],
        ...,
        [ -5.3008,  29.6250,   1.3145,  ...,  -8.5938, -22.0312,  33.3750],
        [  1.8213,   9.7969,   5.2266,  ...,   1.9277,  -9.7266,   9.7578],
        [ -5.5547,  30.2656,   0.2617,  ...,  -9.7031, -21.1562,  33.6250]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -2.1582,  26.3906,   1.3604,  ...,  -9.4844, -17.3594,  30.0000],
        [ -4.1055,  30.5312,   2.1309,  ...,  -8.4922, -22.1406,  33.5312],
        [ -2.9297,  28.0938,   0.7236,  ..., -10.2500, -17.7656,  29.0625],
        ...,
        [ -0.2458,  28.9062,   2.1406,  ...,  -9.5625, -19.0000,  29.7812],
        [ -3.3789,  24.4688,   3.8555,  ...,  -5.9570, -19.7656,  29.4219],
        [ -3.5469,  30.0781,   1.4258,  ...,  -9.4062, -19.7031,  32.3750]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -3.3750,  30.1094,   1.1934,  ...,  -7.1602, -20.0312,  32.4062],
        [ -1.9551,  28.7031,   1.8428,  ...,  -9.8594, -20.6719,  31.8125],
        [ -2.2070,  28.6250,   1.0732,  ...,  -8.9219, -18.1094,  29.7812],
        ...,
        [  4.7383,  21.0781,   3.3594,  ...,  -7.7656, -13.9531,  20.6562],
        [ -5.3008,  31.6406,   0.7124,  ...,  -9.1250, -23.2344,  35.5625],
        [ -4.0820,  28.8594,   0.9268,  ..., -10.8203, -19.1406,  31.5781]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.2109,  29.8750,   0.4258,  ...,  -7.8984, -22.0781,  34.5625],
        [ -2.5332,  30.2656,   2.1758,  ...,  -8.1641, -21.5781,  33.0625],
        [ -3.6797,  30.7812,   1.4473,  ...,  -7.2227, -21.3281,  34.2812],
        ...,
        [  0.6562,  19.0469,   3.6582,  ...,  -8.7500, -13.2031,  19.9219],
        [ -1.0674,  30.1562,   1.0566,  ...,  -8.0859, -18.6250,  32.0000],
        [ -0.4934,  27.2656,   0.4929,  ...,  -8.5312, -15.8672,  30.6406]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -5.5039,  31.3125,   0.3574,  ...,  -9.6641, -22.6719,  35.3750],
        [ -0.2783,  26.3906,   1.6309,  ...,  -6.0977, -16.5312,  27.0469],
        [ -3.9863,  30.6406,   1.2295,  ...,  -8.0000, -22.0000,  33.2500],
        ...,
        [ -5.6133,  29.7969,   0.9648,  ...,  -8.0547, -21.8750,  33.0312],
        [ -4.7852,  30.2812,   2.0859,  ...,  -8.2344, -22.3281,  33.2500],
        [ -0.8789,  18.0156,   0.4985,  ...,  -0.5713, -13.0156,  21.0000]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -6.0312,  28.0469,  -0.4204,  ...,  -8.4375, -19.9844,  34.0312],
        [  6.4492,  16.0156,   1.8447,  ...,  -6.5977,  -8.0391,  14.5000],
        [ -0.9502,  26.6094,   0.8335,  ..., -10.5391, -17.6250,  27.3594],
        ...,
        [ -3.1172,  29.5469,   1.5244,  ...,  -9.8984, -20.9219,  31.6719],
        [ -4.3438,  31.3438,   1.1260,  ...,  -8.4922, -21.8594,  34.6250],
        [ -3.1582,  22.3438,   1.5010,  ...,  -5.3555, -15.6172,  24.2812]],
       device='cuda:0', dtype=torch.float16)
action mean: 
tensor([[ -7.3242,  27.5625,  -0.6621,  ...,  -7.2070, -19.8750,  31.5000],
        [ -9.2812,  26.1250,  -1.7549,  ...,  -6.4062, -19.2812,  31.7812],
        [-11.1875,  22.5000,  -2.6523,  ...,  -2.8496, -18.4375,  29.0156],
        ...,
        [ -7.1758,  29.0312,  -0.5967,  ...,  -7.7344, -21.2969,  34.0625],
        [ -5.6719,  25.8438,  -0.4387,  ...,  -6.1641, -16.9688,  32.1875],
        [ -4.0938,  28.8906,   1.1875,  ...,  -8.2266, -20.5625,  33.3750]],
       device='cuda:0', dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
action mean: 
tensor([[ -2.2285,  28.2188,   1.6152,  ...,  -8.3203, -18.4375,  29.9375],
        [ -3.3242,  28.4375,   0.6074,  ..., -10.5938, -18.7969,  30.9844],
        [ -3.5039,  30.7031,   0.6230,  ...,  -8.7734, -21.0938,  34.0312],
        ...,
        [ -6.7188,  28.5000,  -0.8496,  ...,  -8.7969, -19.5938,  32.0938],
        [ -6.3320,  29.8281,  -0.5122,  ...,  -9.4297, -19.8594,  33.1250],
        [ -6.8281,  29.5781,   0.0774,  ...,  -8.5859, -20.5000,  33.2500]],
       device='cuda:0', dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
action mean: 
tensor([[ -8.5391,  -8.9609,  -1.8525,  ...,  11.0625,   1.0635,  -1.7393],
        [  2.7246,  14.8672,   4.9336,  ...,  -0.7334,  -6.7188,  12.1016],
        [ -7.6562,  29.1562,  -1.4043,  ...,  -8.1797, -21.7031,  34.2188],
        ...,
        [ -6.2617,  29.0156,   0.6963,  ...,  -8.7891, -21.5938,  33.6875],
        [ -3.4199,  30.2812,   2.5742,  ...,  -8.9219, -21.4062,  32.5625],
        [ -4.2344,  30.8594,   1.7861,  ...,  -9.1250, -22.2969,  34.1250]],
       device='cuda:0', dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
action mean: 
tensor([[-7.2539e+00,  2.8344e+01, -4.7656e-01,  ..., -7.4727e+00,
         -2.1750e+01,  3.4250e+01],
        [-8.4609e+00,  2.6828e+01, -1.4150e+00,  ..., -5.9922e+00,
         -2.0938e+01,  3.3156e+01],
        [-6.9883e+00,  2.9484e+01, -2.2791e-01,  ..., -7.8828e+00,
         -2.2234e+01,  3.4500e+01],
        ...,
        [ 4.4219e+00, -3.1688e+01, -2.2107e-01,  ...,  9.0000e+00,
          2.0484e+01, -3.3562e+01],
        [ 4.7891e+00, -2.9578e+01, -2.0081e-01,  ...,  8.7109e+00,
          2.0750e+01, -3.2469e+01],
        [ 4.2188e+00, -2.9656e+01,  1.9703e-03,  ...,  9.8203e+00,
          1.9047e+01, -3.0922e+01]], device='cuda:0', dtype=torch.float16,
       grad_fn=<ReshapeAliasBackward0>)
action mean: 
tensor([[ -0.3892,  28.0000,   2.7578,  ...,  -7.1016, -19.5312,  29.9531],
        [  0.7007,  25.1719,   1.7637,  ...,  -9.7500, -16.4375,  25.8906],
        [ -4.4023,  28.2188,   1.7246,  ...,  -7.6914, -20.4375,  30.8594],
        ...,
        [ -4.9727,  30.7656,   1.1328,  ...,  -9.1328, -22.3906,  34.9062],
        [ -4.4180,  30.5000,   1.8164,  ...,  -8.8984, -21.9844,  33.6250],
        [ -2.2637,  27.9219,   2.6094,  ...,  -6.8867, -19.3438,  30.4531]],
       device='cuda:0', dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
action mean: 
tensor([[nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        ...,
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan]], device='cuda:0',
       dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
Traceback (most recent call last):
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/icaros/Documents/PPGADev/algorithm/train_ppga.py", line 582, in <module>
    train_ppga(cfg, vec_env)
  File "/home/icaros/Documents/PPGADev/algorithm/train_ppga.py", line 462, in train_ppga
    ppo.train(vec_env=vec_env,
  File "/home/icaros/Documents/PPGADev/RL/ppo.py", line 405, in train
    (pg_loss, v_loss, entropy_loss, old_approx_kl, approx_kl, clipfracs, ratio) = self.batch_update(b_values,
  File "/home/icaros/Documents/PPGADev/RL/ppo.py", line 213, in batch_update
    _, newlogprob, entropy = self.vec_inference.get_action(b_obs[:, mb_inds].reshape(-1, obs_dim),
  File "/home/icaros/Documents/PPGADev/models/vectorized.py", line 165, in get_action
    probs = torch.distributions.Normal(action_mean, action_std)
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/site-packages/torch/distributions/normal.py", line 56, in __init__
    super(Normal, self).__init__(batch_shape, validate_args=validate_args)
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/site-packages/torch/distributions/distribution.py", line 56, in __init__
    raise ValueError(
ValueError: Expected parameter loc (Tensor of shape (48000, 8)) of distribution Normal(loc: torch.Size([48000, 8]), scale: torch.Size([48000, 8])) to satisfy the constraint Real(), but found invalid values:
tensor([[nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        ...,
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan]], device='cuda:0',
       dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
Traceback (most recent call last):
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/icaros/Documents/PPGADev/algorithm/train_ppga.py", line 582, in <module>
    train_ppga(cfg, vec_env)
  File "/home/icaros/Documents/PPGADev/algorithm/train_ppga.py", line 462, in train_ppga
    ppo.train(vec_env=vec_env,
  File "/home/icaros/Documents/PPGADev/RL/ppo.py", line 405, in train
    (pg_loss, v_loss, entropy_loss, old_approx_kl, approx_kl, clipfracs, ratio) = self.batch_update(b_values,
  File "/home/icaros/Documents/PPGADev/RL/ppo.py", line 213, in batch_update
    _, newlogprob, entropy = self.vec_inference.get_action(b_obs[:, mb_inds].reshape(-1, obs_dim),
  File "/home/icaros/Documents/PPGADev/models/vectorized.py", line 165, in get_action
    probs = torch.distributions.Normal(action_mean, action_std)
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/site-packages/torch/distributions/normal.py", line 56, in __init__
    super(Normal, self).__init__(batch_shape, validate_args=validate_args)
  File "/home/icaros/anaconda3/envs/ppga/lib/python3.9/site-packages/torch/distributions/distribution.py", line 56, in __init__
    raise ValueError(
ValueError: Expected parameter loc (Tensor of shape (48000, 8)) of distribution Normal(loc: torch.Size([48000, 8]), scale: torch.Size([48000, 8])) to satisfy the constraint Real(), but found invalid values:
tensor([[nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        ...,
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan]], device='cuda:0',
       dtype=torch.float16, grad_fn=<ReshapeAliasBackward0>)
wandb: Waiting for W&B process to finish... (failed 1). Press Control-C to abort syncing.
wandb: 
wandb: Run history:
wandb:                                Env step ▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅
wandb:                                     FPS ▇▇▁▇▁▇▇▁█▁▇▇▁▇▇▁▇▁▇█▁▇▂▇█▂█▇▁▇▁▇█▂▇▂▆▇▁▇
wandb:                                   FPS:  █▄▃▅▇▅▅▅▄▆▄▃▇▄▄▅▄▄▃▅▄▄▅▂▅▄▁▆▇▆▆▄▂▅▄▃▄▅▆▃
wandb:                             QD/QD Score ▁▁▁▃▃▃▃▃▄▄▄▄▅▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇██████████
wandb:                  QD/average performance ▂█▃▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                           QD/best score ▁███████████████████████████████████████
wandb:                         QD/coverage (%) ▁▁▁▃▃▃▃▃▄▄▄▄▅▆▆▆▆▆▆▆▇▇▇▇▇███████████████
wandb:                            QD/iteration ▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███
wandb:                            QD/max_value ▅▂▇▇▅▂▂▃▃▂▃▂█▆▃▂▂▂▃▂▅▂▃▃▃▂▃▃▂▂▁▃▂▂▂▂▂▂▂▆
wandb:                  QD/mean_coeff_measure1 ▃▂▂▂▂▂▁▃▁▂▁▃▂▃▂▂▁▂▂▃▁▂▁▁▅▂█▂▃▁▂▄▂▃▂▂▁▃▃▂
wandb:                  QD/mean_coeff_measure2 ▅▄▅▅▄▃▂▄█▄▅▅▃▃▅▅▃▄▄▅▃▄▄▇▇▄▁▃▃▃▄▅▄▅▄▄▄▄▂▃
wandb:                  QD/mean_coeff_measure3 ▆▄▂▇▆▅▅▆▄▅█▄▂▁▅▅▆▆▅▆▄▃▆▇▇▃▇▂▄▇▃▆▅▆▃▃▂▄▆▁
wandb:                  QD/mean_coeff_measure4 ▆▅▃▅▄▆▆█▁▇▇▆▆▄█▇▇█▇▆▅▅█▆▇▅▃▆█▄▅▆▆▆▅▅▄█▅▆
wandb:                  QD/mean_coeff_measure5 ▄▆▄▆▅▃▃▅▁█▅▅▄▄▃▄▄▄▄▄▄▄▃▁▃▄▄▃▁▃▄▄▁▅▄▃▄▄▄▃
wandb:                       QD/mean_coeff_obj █▃▃▅▂▄▅▅▅▅▅▂▄▄▄▄▅▅▃▁▂▂▄██▂▃▁▃▄▂▃▄▁▂▃▁▅▄▄
wandb:                           QD/mean_value █▄▃█▆▂▇▆▂▇██▇▇▅▆█▇▇█▆▄▇██▁█▇▆█▇▇▅█▅█▅██▅
wandb:                             QD/new_sols █▁▂▃▁▁▁▁▁▂▁▁▃▂▁▁▁▁▁▁▂▁▁▁▁▁▂▁▁▁▁▂▁▁▁▁▁▁▁▁
wandb:                             QD/restarts ▁▁▂▂▂▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▃▄▄▄▄▅▅▅▆▆▇▇████
wandb:                                  Update ▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅
wandb:                             XNES/norm_A ▄▆▇▇▄▂▇▆▇▅▃▁▇▇▅▅▆▄▂▂▇▇▇▅▅▇█▇▇▇▇█▇▆▇▇▇▄▆▇
wandb:                 charts/actor_avg_logstd ▇▅▂█▇▆▄▄▂▅▅▅▃▃▂▃▆▅▄▅▃▁▄▅▄▅█▇▅▅▅▇▃▃▃▃▇▄▅▃
wandb:            charts/average_rew_magnitude ▆▅▅▆▅▃▁▅▁▅▇▄▅▄▃▅▅▅▃▅▅▃▅▂█▅▆▆▅▄▅▄▄▅▃▅▂▅▅▃
wandb:                             global_step ▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅▁▃▅▆█▁▃▅▆█▁▃▅
wandb:                        losses/approx_kl ▁▁▁▁▁▁▁▁█▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                         losses/clipfrac ▁▂▆▁▃▂▄▄█▃▃▂█▅▇▅▁▄▂▂▆█▄▃▂▆▁▁▃▂▄▂▅▅▄▅▁▃▄▄
wandb:                          losses/entropy ▇▅▂█▇▆▄▄▂▅▅▅▃▃▂▃▆▅▄▅▃▁▄▅▄▅█▇▅▅▅▇▃▃▃▃▇▄▅▃
wandb:               losses/explained_variance █▇▆█▂█▇▆▃▁█▄▆▅█▇█▂██▆█▃██▇████▂██▇▇▁█▇▇█
wandb: losses/move_mean_agent=False/value_loss ▆▂▃▇▁▁▂▄█▁▁▁▃█▁▂▇▁▁▁▄▇▂▁▁▂▇▁▂█▁▁▁▃█▂▁▂▂█
wandb:  losses/move_mean_agent=True/value_loss ▄▁▁▄▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▃
wandb:                    losses/old_approx_kl ▁▁▁▁▁▁▁▁█▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                      losses/policy_loss ▁▁▂▁▁▁▂▂█▁▁▁▆▂▃▂▁▁▁▂▁█▁▁▁▃▁▁▁▁▁▁▃▂▂▂▁▁▁▂
wandb:                       losses/value_loss ▁▁▂▁▆▁▁▂▁▇▁▁▂▁▁▂▁█▁▁▂▁█▁▁▁▁▁▁▁▇▁▁▁▁▇▁▁▂▁
wandb:                               perf/_fps ▇▇▁▇▁▇▇▁█▁▇▇▁▇▇▁▇▁▇█▁▇▂▇█▂█▇▁▇▁▇█▂▇▂▆▇▁▇
wandb:                           train/act_max ▁▁▂▄▄▄▃▃▄▃▃▃▆▃▃▃▄▄▄▄▅▅▃▅▅█▅▅▄▃▃▄▄▄▄▄▅▅▄▄
wandb:                           train/act_min ██▇▆▆▆▆▆▅▆▆▇▃▆▅▆▅▅▅▅▄▅▄▄▄▁▅▅▅▆▆▅▅▅▅▅▅▅▆▅
wandb:                           train/adv_max ▆▂▃▅▃▅▆▃▂▃▆▁▃▄▆▃▄▃▄▂▃█▃▄▇▃█▄▃█▃▅▆▃▃▃▆▂▃▄
wandb:                          train/adv_mean ▅▄▅▄▅▄▁▅▁▅▆▂▅▅▄▆▄▅▄▄▆▃▅▄█▅▇▆▅▄▅▄▆▆▄▅▃▆▆▄
wandb:                           train/adv_min ▃▇█▄█▄▃█▅█▃▇█▆▂█▄█▅▆▇▃█▅▄█▁▅█▁█▄▅█▆█▄▇█▆
wandb:                           train/adv_std ▆▁▆▅▇▄█▇▅▇▄▃▇▄▄▇▃▇▂▂▇▇▇▅▆██▃█▅▇▃▅▇▄▇▃▂▇▄
wandb:                  train/obs_running_mean ▆▆▆▅▃▄▄▅▅▁▄▃▆▄▄▅▄▅▄▄█▄▇▅▅█▅▅▆▅▇▅▅▅▅▅▅▅▆▅
wandb:                   train/obs_running_std ▂▁▂▂▃▃▃▅▄▂▄▃▃▄▄▅▄▄▅▅▆▅▆▅▅▂▅▅█▅▅▅▅▅▅▆▅▅▂▅
wandb:                       train/policy_loss ▁▁▂▁▁▁▂▂█▁▁▁▆▂▃▂▁▁▁▂▁█▁▁▁▃▁▁▁▁▁▁▃▂▂▂▁▁▁▂
wandb:                         train/ratio_max ▁▁▁▁▁▁▁▁▁▁▁▁▆▁▂▁▁▁▁▁▃▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                         train/ratio_min █▅▁█▃▄▄▁▁▁▄▅▁▁▁▁▆▁▂▂▁▁▁▃▃▁▃▃▁▄▁▄▂▁▃▁▆▂▁▃
wandb:                             train/value ▅▄▄▇▄▂▁▅▁▄▆▄▄▄▃▅▅▅▃▆▅▃▅▁█▅▆▆▅▄▅▄▄▅▄▄▂▆▅▃
wandb:                        train/value_loss ▁▁▂▁▆▁▁▂▁▇▁▁▂▁▁▂▁█▁▁▂▁█▁▁▁▁▁▁▁▇▁▁▁▁▇▁▁▂▁
wandb: 
wandb: Run summary:
wandb:                                Env step 768000
wandb:                                     FPS 348382.20423
wandb:                                   FPS:  271071.89675
wandb:                             QD/QD Score 3275139.29314
wandb:                  QD/average performance 363.01352
wandb:                           QD/best score 5074.68855
wandb:                         QD/coverage (%) 5.40846
wandb:                            QD/iteration 984
wandb:                            QD/max_value 288.5715
wandb:                  QD/mean_coeff_measure1 -0.98574
wandb:                  QD/mean_coeff_measure2 -1.21767
wandb:                  QD/mean_coeff_measure3 -3.03574
wandb:                  QD/mean_coeff_measure4 -0.21703
wandb:                  QD/mean_coeff_measure5 -0.8246
wandb:                       QD/mean_coeff_obj 1.19026
wandb:                           QD/mean_value -1229.15187
wandb:                             QD/new_sols 2
wandb:                             QD/restarts 126
wandb:                                  Update 2
wandb:                             XNES/norm_A 7.36382
wandb:                 charts/actor_avg_logstd -2.45546
wandb:            charts/average_rew_magnitude -5.9884
wandb:                             global_step 768000
wandb:                        losses/approx_kl 5178.35107
wandb:                         losses/clipfrac 0.96804
wandb:                          losses/entropy -1.03652
wandb:               losses/explained_variance 0.91458
wandb: losses/move_mean_agent=False/value_loss 0.16285
wandb:  losses/move_mean_agent=True/value_loss 0.00241
wandb:                    losses/old_approx_kl 5179.35107
wandb:                      losses/policy_loss 0.29832
wandb:                       losses/value_loss 0.00241
wandb:                               perf/_fps 348382.20423
wandb:                           train/act_max 36.625
wandb:                           train/act_min -34.8125
wandb:                           train/adv_max 213.97179
wandb:                          train/adv_mean -20.20522
wandb:                           train/adv_min -165.91348
wandb:                           train/adv_std 18.524
wandb:                  train/obs_running_mean 0.02048
wandb:                   train/obs_running_std 0.79119
wandb:                       train/policy_loss 0.29832
wandb:                         train/ratio_max 0.02842
wandb:                         train/ratio_min 0.0
wandb:                             train/value -0.82999
wandb:                        train/value_loss 0.00241
wandb: 
wandb: 🚀 View run energy_1000_paper_ppga_ant_seed_1111 at: https://wandb.ai/qdrl/PPGA/runs/loq3dfhv
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20230709_124444-loq3dfhv/logs
